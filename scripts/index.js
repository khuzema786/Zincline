const util = require("util");
const exec = util.promisify(require("child_process").exec);
const { readdir, readFile, writeFile, watch } = require("fs/promises");
const { compress } = require("compress-images/promise");
const { minify: htmlminify } = require("html-minifier");
const { minify: cssminify } = require("csso");
const { minify: jsminify } = require("uglify-js");

const isDevelopment = process.argv[3] === "--development";

const options = {
  includeAutoGeneratedTags: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortClassName: true,
  useShortDoctype: true,
  collapseWhitespace: true,
};

const dirname = __dirname
  .split("/")
  .slice(0, __dirname.split("/").length - 1)
  .join("/");

const main = async () => {
  const products = require("./products")(`${dirname}/src/products.xlsx`);
  const files = [];
  const processDir = async (dirname) => {
    try {
      const items = await readdir(dirname, { withFileTypes: true });
      for (const item of items) {
        if (item.isDirectory()) {
          await processDir(`${dirname}/${item.name}`);
        } else {
          files.push(`${dirname}/${item.name}`);
        }
      }
    } catch (err) {}
  };

  const template = await readFile(`${dirname}/src/template.html`);
  const header = await readFile(`${dirname}/src/header.html`);
  const footer = await readFile(`${dirname}/src/footer.html`);
  const productTemplate = await readFile(
    `${dirname}/src/product-template.html`
  );

  const _template = template
    .toString()
    .replace("{{header}}", header.toString())
    .replace("{{footer}}", footer.toString())
    .replace(
      "{{products}}",
      Object.keys(products)
        .map(
          (key) =>
            `<li>
                  <a href="${key
                    .toLowerCase()
                    .replace(" ", "-")}.html">${key}</a>
              </li>`
        )
        .join("\n")
    );

  await exec(
    `rm -rf "${dirname}/dist" && 
    mkdir -p "${dirname}/dist" && 
    cp -r "${dirname}/src"/* "${dirname}/dist" && 
    rm -rf "${dirname}/dist/product-template.html" && 
    rm -rf "${dirname}/dist/template.html" && 
    rm -rf "${dirname}/dist/products.xlsx" &&
    rm -rf "${dirname}/dist/header.html" &&
    rm -rf "${dirname}/dist/footer.html"`
  );

  await processDir(`${dirname}/dist`);
  let htmlFiles = files.filter((file) => file.match(/\.html$/gm));
  let cssFiles = files.filter((file) => file.match(/\.css$/gm));
  let jsFiles = files.filter((file) => file.match(/\.js$/gm));
  let galleryImgFiles = files.filter((file) =>
    file.match(/gallery\-.*(\.png|\.jpg|\.jpeg)$/gm)
  );
  let portfolioImgFiles = files.filter((file) =>
    file.match(/portfolio\-.*(\.png|\.jpg|\.jpeg)$/gm)
  );

  if (!isDevelopment) {
    await exec(
      `rm -rf "${dirname}/dist/assets/images" && mkdir "${dirname}/dist/assets/images"`
    );
  }

  for (let i = 0; i < htmlFiles.length; i++) {
    let data = await readFile(htmlFiles[i]);

    data = _template
      .replace("{{content}}", data.toString())
      .replace(
        "{{portfolio}}",
        portfolioImgFiles
          .map((portfolio) => {
            let filterClass = portfolio
              .split("/")
              [portfolio.split("/").length - 1].split(".")[0]
              .split("-");
            filterClass = filterClass
              .slice(0, filterClass.length - 1)
              .join("-")
              .toLowerCase();
            let portfolioName = filterClass
              .split("-")
              .slice(1)
              .map((el) => el.charAt(0).toUpperCase() + el.slice(1))
              .join(" ");
            return `<div class="item_pos col-lg-12">	
        <div class="witr_single_pslide">	
          <div class="witr_pslide_image">
            <img src="assets/images/${
              portfolio.split("/")[portfolio.split("/").length - 1]
            }" alt="">
          </div>
          <div class="witr_content_pslide_text">
            <div class="witr_content_pslide">
              <h3>${portfolioName}</h3>
            </div>
          </div>	
        </div> 
      </div>`;
          })
          .join("\n")
      )
      .replace(
        "{{gallery-images}}",
        galleryImgFiles
          .map((gallery) => {
            let filterClass = gallery
              .split("/")
              [gallery.split("/").length - 1].split(".")[0]
              .split("-");
            filterClass = filterClass
              .slice(0, filterClass.length - 1)
              .join("-")
              .toLowerCase();
            return `<div class="col-lg-6  grid-item col-md-6 col-sm-12 ${filterClass} witr_all_mb_30">
        <div class="single_protfolio" >
          <div class="prot_thumb">
            <img src="assets/images/${
              gallery.split("/")[gallery.split("/").length - 1]
            }" alt="" >							
            <div class="prot_content em_port_content ">
              <div class="prot_content_inner">
                <div class="picon">
                  <a class="portfolio-icon venobox vbox-item" data-gall="myportfolio" href="assets/images/${
                    gallery.split("/")[gallery.split("/").length - 1]
                  }"><i class="fas fa-arrows-alt"></i></a>
                </div>
              </div>	
            </div>		
          </div>				
        </div>
      </div>`;
          })
          .join("\n")
      )
      .replace(
        "{{gallery-tabs}}",
        Array.from(
          new Set(
            galleryImgFiles.map((gallery) => {
              let filterClass = gallery
                .split("/")
                [gallery.split("/").length - 1].split(".")[0]
                .split("-");
              filterClass = filterClass
                .slice(0, filterClass.length - 1)
                .join("-")
                .toLowerCase();
              return filterClass;
            })
          )
        )
          .map(
            (filterClass) =>
              `<li data-filter=".${filterClass}">${filterClass
                .split("-")
                .slice(1)
                .map((el) => el.charAt(0).toUpperCase() + el.slice(1))
                .join(" ")}</li>`
          )
          .join("\n")
      );
    if (isDevelopment) {
      await writeFile(htmlFiles[i], data, { encoding: "utf8" });
    } else {
      await writeFile(htmlFiles[i], htmlminify(data, options), {
        encoding: "utf8",
      });
    }
  }

  for (let i = 0; i < cssFiles.length; i++) {
    const data = await readFile(cssFiles[i]);
    if (isDevelopment) {
      await writeFile(cssFiles[i], data.toString(), {
        encoding: "utf8",
      });
    } else {
      await writeFile(cssFiles[i], cssminify(data.toString()).css, {
        encoding: "utf8",
      });
    }
  }

  for (let i = 0; i < jsFiles.length; i++) {
    const data = await readFile(jsFiles[i]);
    if (isDevelopment) {
      await writeFile(jsFiles[i], data.toString(), {
        encoding: "utf8",
      });
    } else {
      await writeFile(jsFiles[i], jsminify(data.toString()).code, {
        encoding: "utf8",
      });
    }
  }

  if (!isDevelopment) {
    await compress({
      source: `${dirname}/src/assets/images/*.{jpg,JPG,jpeg,JPEG,png}`,
      destination: `${dirname}/dist/assets/images/`,
      // compression : 0 - 100
      enginesSetup: {
        // jpg: { engine: "mozjpeg", command: ["-quality", "60"] },
        // png: { engine: "pngquant", command: ["--quality=20-50", "-o"] },
        jpg: { engine: "mozjpeg", command: ["-quality", "10"] },
        png: { engine: "pngquant", command: ["--quality=10-20", "-o"] },
        svg: { engine: "svgo", command: "--multipass" },
        gif: {
          engine: "gifsicle",
          command: ["--colors", "64", "--use-col=web"],
        },
      },
    });

    await exec(`rm -rf "${dirname}/log"`);
  }

  Object.keys(products).map(async (key) => {
    let _productTemplate = productTemplate
      .toString()
      .replace("{{header}}", header.toString())
      .replace("{{footer}}", footer.toString())
      .replace(
        "{{products}}",
        Object.keys(products)
          .map(
            (key) =>
              `<li>
                <a href="${key.toLowerCase().replace(" ", "-")}.html">${key}</a>
            </li>`
          )
          .join("\n")
      )
      .replace(
        "{{all-products}}",
        products[key]
          .map(
            ({
              name,
              specifications,
              description,
              suitable,
              features,
              images,
            }, i) =>
              `<div class="witr_product_area container">
        <div class="witr_section_title_inner heading-section">
          <h3>${name}</h3>
        </div>
        <div class="row">
          <div class="col-md-6">
            <div class = "product-imgs">
              <div class = "img-display">
                <div class = "img-showcase img-showcase-${i + 1}">
                  ${images.map((image) => `<img src = "${image}">`).join("\n")}
                </div>
              </div>
              ${
                images.length > 1
                  ? `<div class = "img-select img-select-${i + 1}" style = "${
                      "grid-template-columns:" + " 1fr".repeat(images.length)
                    }">` +
                    images
                      .map(
                        (image, idx) =>
                          `<div class = "img-item">
                      <a href = "#" data-id = "${idx + 1}">
                        <img src = "${image}">
                      </a>
                    </div>`
                      )
                      .join("\n")
                  : ""
              }
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <div class="product-dtl">
              <p>${description}</p>
            </div>
            <div class="row">
              <div class="col-md-6">
                <h6>Features</h6>
                <ul>
                  ${features
                    .map((feature) => `<li><p>${feature}</p></li>`)
                    .join("\n")}
                </ul>
              </div>
              <div class="col-md-6">
                <h6>Suitable For</h6>
                <ul>
                  ${suitable
                    .map((suitable) => `<li><p>${suitable}</p></li>`)
                    .join("\n")}
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="product-info-tabs">
          <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item">
              <a class="nav-link active" id="specifications-tab" data-toggle="tab" href="#specifications" role="tab"
                aria-controls="specifications" aria-selected="true">Specifications</a>
            </li>
          </ul>
          <div class="tab-content" id="myTabContent">
            <div class="tab-pane fade show active" id="specifications" role="tabpanel"
              aria-labelledby="specifications-tab">
              <div class="container table-responsive">
                <table class="specs-table table table-bordered table-hover">
                  <tbody>
                    ${specifications
                      .map(
                        (specification) =>
                          `<tr>
                              <th scope="row">${specification.type}</th>
                              <td>${specification.value}</td>
                            </tr>`
                      )
                      .join("\n")}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>`
          )
          .join("\n")
      );

    if (isDevelopment) {
      await writeFile(
        `${dirname}/dist/${key.toLowerCase().replace(" ", "-")}.html`,
        _productTemplate,
        { encoding: "utf8" }
      );
    } else {
      await writeFile(
        `${dirname}/dist/${key.toLowerCase().replace(" ", "-")}.html`,
        htmlminify(_productTemplate, options),
        { encoding: "utf8" }
      );
    }
  });
};

(async () => {
  try {
    await main();
    if (process.argv[2] === "--watch") {
      const watcher = watch(`${dirname}/src`, { recursive: true });
      for await (const event of watcher) {
        console.log(event);
        await main();
      }
    }
  } catch (err) {
    if (err.name === "AbortError") return;
    throw err;
  }
})();
